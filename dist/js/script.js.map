{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\js\\index.js"
  ],
  "names": [],
  "mappings": "AAAA;;;ACAA,IAAM,cAAc,QAChB,OAAO,QAAP,CAAgB,QAAhB,CAAyB,KAAzB,EAAgC;AAC5B,8EADJ,CADgB,CAApB;;AAMA;AACA,IAAM,2BACF,mBAAmB,SAAnB,KACC,OAAO,QAAP,CAAgB,QAAhB,KAA6B,QAA7B,IAAyC,WAD1C,CADJ;;AAIA,SAAS,wBAAT,CAAmC,YAAnC,EAAiD;AAC7C,QAAM,mBAAmB,aAAa,UAAtC;AACA,QAAI,UAAU,aAAV,CAAwB,UAA5B,EAAwC;AACpC,yBAAiB,aAAjB,GAAiC,YAAM;AACnC,oBAAQ,iBAAiB,KAAzB;AACI,qBAAK,WAAL;AACI;AACA;AACA;AACA;AACA;;AAEJ,qBAAK,WAAL;AACI,0BAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;;AAEJ;AACI;AAZR;AAcH,SAfD;AAgBH;AACJ;;AAED,SAAS,QAAT,GAAqB;AACjB,QAAI,wBAAJ,EAA8B;AAC1B,kBAAU,aAAV,CAAwB,QAAxB,CAAiC,oBAAjC,EACC,IADD,CACM,wBAAgB;AAClB;AACA;AACA,yBAAa,aAAb,GAA6B,YAAM;AAC/B,yCAAyB,YAAzB;AACH,aAFD;AAGH,SAPD;AAQA;AACA;AACA;AACH;AACJ;;AAED,OAAO,OAAP,GAAiB;AACb;AADa,CAAjB",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const isLocalhost = Boolean(\n    window.location.hostname.match( // localhost OR [::1] OR 127.0.0.1/8\n        /^localhost$|^\\[::1\\]$|^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\n// Service workers are only supported over https (and localhost for dev)\nconst isServiceWorkerSupported =\n    'serviceWorker' in navigator &&\n    (window.location.protocol === 'https:' || isLocalhost);\n\nfunction handleInstallationStates (registration) {\n    const installingWorker = registration.installing;\n    if (navigator.serviceWorker.controller) {\n        installingWorker.onstatechange = () => {\n            switch (installingWorker.state) {\n                case 'installed':\n                    // At this point, the old content will have been purged and the\n                    // fresh content will have been added to the cache.\n                    // It's the perfect time to display a \"New content is\n                    // available; please refresh.\" message in the page's interface.\n                    break;\n\n                case 'redundant':\n                    throw new Error('The installing service worker became redundant.');\n\n                default:\n                    // Ignore\n            }\n        };\n    }\n}\n\nfunction register () {\n    if (isServiceWorkerSupported) {\n        navigator.serviceWorker.register('/service-worker.js')\n        .then(registration => {\n            // updatefound is fired if service-worker.js changes,\n            // or when the SW is first installed\n            registration.onupdatefound = () => {\n                handleInstallationStates(registration);\n            };\n        });\n        // .catch(e => {\n        //     logger.error('Error during service worker registration:', e)\n        // });\n    }\n}\n\nmodule.exports = {\n    register\n};\n"
  ]
}